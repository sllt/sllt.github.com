{"Asset":[{"_id":"themes/pacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":false},{"_id":"themes/pacman/source/img/author.jpg","path":"img/author.jpg","modified":false},{"_id":"themes/pacman/source/img/favicon.ico","path":"img/favicon.ico","modified":false},{"_id":"themes/pacman/source/img/logo.svg","path":"img/logo.svg","modified":false},{"_id":"themes/pacman/source/img/pacman.jpg","path":"img/pacman.jpg","modified":false},{"_id":"themes/pacman/source/img/snowy.png","path":"img/snowy.png","modified":false},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":false},{"_id":"themes/pacman/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/pacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes/kael/source/css/component.css","path":"css/component.css","modified":false},{"_id":"themes/kael/source/css/screen.css","path":"css/screen.css","modified":false},{"_id":"themes/kael/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":false},{"_id":"themes/kael/source/fonts/OpenSans-Bold-webfont.woff","path":"fonts/OpenSans-Bold-webfont.woff","modified":false},{"_id":"themes/kael/source/fonts/OpenSans-Regular-webfont.woff","path":"fonts/OpenSans-Regular-webfont.woff","modified":false},{"_id":"themes/kael/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/kael/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/kael/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/kael/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/kael/source/js/jquery.min.js","path":"js/jquery.min.js","modified":false},{"_id":"themes/kael/source/js/lib.js","path":"js/lib.js","modified":false},{"_id":"themes/kael/source/js/main.js","path":"js/main.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1420697687000},{"_id":"scaffolds/photo.md","mtime":1420697687000},{"_id":"scaffolds/page.md","mtime":1420697687000},{"_id":"scaffolds/post.md","mtime":1420697687000},{"_id":"source/_posts/first-blog.md","mtime":1420697687000},{"_id":"source/_posts/golang-sort.md","mtime":1420697687000},{"_id":"themes/pacman/LICENSE","mtime":1412684064000},{"_id":"themes/pacman/README.md","mtime":1412684064000},{"_id":"themes/pacman/_config.yml","mtime":1413008585000},{"_id":"themes/pacman/languages/default.yml","mtime":1412684064000},{"_id":"themes/pacman/languages/zh-CN.yml","mtime":1412684064000},{"_id":"themes/pacman/languages/zh-TW.yml","mtime":1412684064000},{"_id":"themes/pacman/scripts/fancybox.js","mtime":1412684064000},{"_id":"themes/pacman/layout/archive.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/category.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/index.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/layout.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/page.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/post.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/tag.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_widget/archive.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_widget/category.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_widget/links.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_widget/rss.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_widget/tag.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_widget/tagcloud.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/after_footer.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/archive.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/categories.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/article.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/footer.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/google_analytics.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/head.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/header.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/pagination.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/search.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/sidebar.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/tags.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/post/article.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/post/catetags.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/post/comment.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/post/footer.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/post/gallery.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/post/header.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/post/jiathis.ejs","mtime":1412684064000},{"_id":"themes/pacman/layout/_partial/post/pagination.ejs","mtime":1412684064000},{"_id":"themes/pacman/source/font/FontAwesome.otf","mtime":1412684064000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","mtime":1412684064000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","mtime":1412684064000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","mtime":1412684064000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","mtime":1412684064000},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","mtime":1412684064000},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","mtime":1412684064000},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","mtime":1412684064000},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","mtime":1412684064000},{"_id":"themes/pacman/source/img/author.jpg","mtime":1412684428000},{"_id":"themes/pacman/source/img/favicon.ico","mtime":1412684428000},{"_id":"themes/pacman/source/img/logo.svg","mtime":1412684064000},{"_id":"themes/pacman/source/img/pacman.jpg","mtime":1412684064000},{"_id":"themes/pacman/source/img/snowy.png","mtime":1412684428000},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","mtime":1412684064000},{"_id":"themes/pacman/source/css/style.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_base/code.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_base/font.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_base/variable.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_base/public.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_partial/article.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_partial/aside.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_partial/duoshuo.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_partial/footer.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_partial/gallery.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_partial/header.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_partial/index.styl","mtime":1412684064000},{"_id":"themes/pacman/source/css/_partial/helper.styl","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/blank.gif","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1412684064000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1412684064000},{"_id":"source/_posts/java-set.md","mtime":1420697687000},{"_id":"source/_posts/java-hash.md","mtime":1420697687000},{"_id":"source/_posts/use-markdown-in-rails.md","mtime":1420697687000},{"_id":"source/_posts/metaprogramming-ruby-object.md","mtime":1420697687000},{"_id":"themes/kael/LICENSE","mtime":1420697688000},{"_id":"themes/kael/README.md","mtime":1420697688000},{"_id":"themes/kael/_config.yml","mtime":1420697688000},{"_id":"themes/kael/layout/archive.ejs","mtime":1420697688000},{"_id":"themes/kael/layout/category.ejs","mtime":1420697688000},{"_id":"themes/kael/layout/index.ejs","mtime":1420697688000},{"_id":"themes/kael/layout/layout.ejs","mtime":1420697688000},{"_id":"themes/kael/layout/post.ejs","mtime":1420697688000},{"_id":"themes/kael/layout/page.ejs","mtime":1420697688000},{"_id":"themes/kael/layout/tag.ejs","mtime":1420697688000},{"_id":"themes/kael/layout/kael/after_all.ejs","mtime":1420697688000},{"_id":"themes/kael/layout/kael/footer.ejs","mtime":1420697688000},{"_id":"themes/kael/layout/kael/head.ejs","mtime":1420697688000},{"_id":"themes/kael/layout/kael/index.ejs","mtime":1420697688000},{"_id":"themes/kael/layout/kael/post.ejs","mtime":1420697688000},{"_id":"themes/kael/source/css/component.css","mtime":1420697688000},{"_id":"themes/kael/source/css/screen.css","mtime":1420697688000},{"_id":"themes/kael/source/fonts/FontAwesome.otf","mtime":1420697688000},{"_id":"themes/kael/source/fonts/OpenSans-Bold-webfont.woff","mtime":1420697688000},{"_id":"themes/kael/source/fonts/OpenSans-Regular-webfont.woff","mtime":1420697688000},{"_id":"themes/kael/source/fonts/fontawesome-webfont.eot","mtime":1420697688000},{"_id":"themes/kael/source/fonts/fontawesome-webfont.svg","mtime":1420697688000},{"_id":"themes/kael/source/fonts/fontawesome-webfont.ttf","mtime":1420697688000},{"_id":"themes/kael/source/fonts/fontawesome-webfont.woff","mtime":1420697688000},{"_id":"themes/kael/source/js/jquery.min.js","mtime":1420697688000},{"_id":"themes/kael/source/js/lib.js","mtime":1420697688000},{"_id":"themes/kael/source/js/main.js","mtime":1420697688000}],"Category":[],"Page":[],"Post":[{"title":"从今天开始认真写东西啊混蛋","date":1400813925000,"tags":["k5wbyqyu1pwslo2m"],"content":"<p>认真写学习心得。<br>所有的东西是写给自己看的，保持尽可能的简单。<br>ok that’s all</p>\n","source":"_posts/first-blog.md","raw":"title: 从今天开始认真写东西啊混蛋\ndate: 2014-05-23 10:58:45\ntags: 废话\n---\n\n认真写学习心得。\n所有的东西是写给自己看的，保持尽可能的简单。\nok that's all\n","slug":"first-blog","updated":1420697687000,"excerpt":"","_id":"2ine11my1nfzre8y","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"经典排序算法的golang实现","date":1406601139000,"tags":["wb00sxv9bfh67y1p"],"content":"<blockquote>\n<p>冒泡排序</p>\n</blockquote>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/0/06/Bubble-sort.gif\" alt=\"Bubble Sort\"></p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">func</span> (a Array) BubbleSort() {</div><div class=\"line\">    <span class=\"keyword\">for</span> i :=<span class=\"number\"> 0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ {</div><div class=\"line\">        <span class=\"keyword\">for</span> j :=<span class=\"number\"> 0</span>; j &lt; <span class=\"built_in\">len</span>(a)-i<span class=\"number\">-1</span>; j++ {</div><div class=\"line\">            <span class=\"keyword\">if</span> a[j] &gt; a[j<span class=\"number\">+1</span>] {</div><div class=\"line\">                a[j], a[j<span class=\"number\">+1</span>] = a[j<span class=\"number\">+1</span>], a[j]</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>插入排序</p>\n</blockquote>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif\" alt=\"Insert Sort\"></p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">func</span> (a Array) InsertSort() {</div><div class=\"line\">    <span class=\"keyword\">for</span> i :=<span class=\"number\"> 0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ {</div><div class=\"line\">        tmp := a[i]</div><div class=\"line\">        j := i -<span class=\"number\"> 1</span></div><div class=\"line\">        <span class=\"keyword\">for</span> j &gt;=<span class=\"number\"> 0</span> && a[j] &gt; tmp {</div><div class=\"line\">            a[j<span class=\"number\">+1</span>] = a[j]</div><div class=\"line\">            j--</div><div class=\"line\">        }</div><div class=\"line\">        a[j<span class=\"number\">+1</span>] = tmp</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>快速排序</p>\n</blockquote>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/9/9c/Quicksort-example.gif\" alt=\"Quick Sort\"></p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">func</span> (a Array) QuickSort(left, right <span class=\"typename\">int</span>) {</div><div class=\"line\">    <span class=\"keyword\">if</span> left &lt; right {</div><div class=\"line\">        key := a[left]</div><div class=\"line\">        low := left</div><div class=\"line\">        high := right</div><div class=\"line\">        <span class=\"keyword\">for</span> low &lt; high {</div><div class=\"line\">            <span class=\"keyword\">for</span> low &lt; high && a[high] &gt; key {</div><div class=\"line\">                high--</div><div class=\"line\">            }</div><div class=\"line\">            a[low] = a[high]</div><div class=\"line\">            <span class=\"keyword\">for</span> low &lt; high && a[low] &lt; key {</div><div class=\"line\">                low++</div><div class=\"line\">            }</div><div class=\"line\">            a[high] = a[low]</div><div class=\"line\">        }</div><div class=\"line\">        a[low] = key</div><div class=\"line\">        a.QuickSort(left, low<span class=\"number\">-1</span>)</div><div class=\"line\">        a.QuickSort(low<span class=\"number\">+1</span>, right)</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>完整代码</p>\n</blockquote>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Array []<span class=\"typename\">int32</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">func</span> (a Array) BubbleSort() {</div><div class=\"line\">    <span class=\"keyword\">for</span> i :=<span class=\"number\"> 0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ {</div><div class=\"line\">        <span class=\"keyword\">for</span> j :=<span class=\"number\"> 0</span>; j &lt; <span class=\"built_in\">len</span>(a)-i<span class=\"number\">-1</span>; j++ {</div><div class=\"line\">            <span class=\"keyword\">if</span> a[j] &gt; a[j<span class=\"number\">+1</span>] {</div><div class=\"line\">                a[j], a[j<span class=\"number\">+1</span>] = a[j<span class=\"number\">+1</span>], a[j]</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">func</span> (a Array) InsertSort() {</div><div class=\"line\">    <span class=\"keyword\">for</span> i :=<span class=\"number\"> 0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ {</div><div class=\"line\">        tmp := a[i]</div><div class=\"line\">        j := i -<span class=\"number\"> 1</span></div><div class=\"line\">        <span class=\"keyword\">for</span> j &gt;=<span class=\"number\"> 0</span> && a[j] &gt; tmp {</div><div class=\"line\">            a[j<span class=\"number\">+1</span>] = a[j]</div><div class=\"line\">            j--</div><div class=\"line\">        }</div><div class=\"line\">        a[j<span class=\"number\">+1</span>] = tmp</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">func</span> (a Array) QuickSort(left, right <span class=\"typename\">int</span>) {</div><div class=\"line\">    <span class=\"keyword\">if</span> left &lt; right {</div><div class=\"line\">        key := a[left]</div><div class=\"line\">        low := left</div><div class=\"line\">        high := right</div><div class=\"line\">        <span class=\"keyword\">for</span> low &lt; high {</div><div class=\"line\">            <span class=\"keyword\">for</span> low &lt; high && a[high] &gt; key {</div><div class=\"line\">                high--</div><div class=\"line\">            }</div><div class=\"line\">            a[low] = a[high]</div><div class=\"line\">            <span class=\"keyword\">for</span> low &lt; high && a[low] &lt; key {</div><div class=\"line\">                low++</div><div class=\"line\">            }</div><div class=\"line\">            a[high] = a[low]</div><div class=\"line\">        }</div><div class=\"line\">        a[low] = key</div><div class=\"line\">        a.QuickSort(left, low<span class=\"number\">-1</span>)</div><div class=\"line\">        a.QuickSort(low<span class=\"number\">+1</span>, right)</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">func</span> main() {</div><div class=\"line\">    <span class=\"keyword\">var</span> a Array = []<span class=\"typename\">int32</span><span class=\"number\">{1</span>,<span class=\"number\"> 5</span>,<span class=\"number\"> 2</span>,<span class=\"number\"> 6</span>,<span class=\"number\"> 3</span>,<span class=\"number\"> 9</span>,<span class=\"number\"> 7</span>,<span class=\"number\"> 4</span>}</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//a.Bubble()</span></div><div class=\"line\">    <span class=\"comment\">//a.Insert()</span></div><div class=\"line\">    a.QuickSort<span class=\"number\">(0</span>, <span class=\"built_in\">len</span>(a<span class=\"number\">)-1</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> _, i := <span class=\"keyword\">range</span> a {</div><div class=\"line\">        <span class=\"built_in\">print</span>(i)</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/golang-sort.md","raw":"title: 经典排序算法的golang实现\ndate: 2014-07-29 10:32:19\ntags: 算法\n---\n> 冒泡排序\n\n![Bubble Sort](http://upload.wikimedia.org/wikipedia/commons/0/06/Bubble-sort.gif)\n\n```golang\n    func (a Array) BubbleSort() {\n        for i := 0; i < len(a); i++ {\n            for j := 0; j < len(a)-i-1; j++ {\n                if a[j] > a[j+1] {\n                    a[j], a[j+1] = a[j+1], a[j]\n                }\n            }\n        }\n    }\n```\n\n > 插入排序\n\n![Insert Sort](http://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif)\n\n```golang\n    func (a Array) InsertSort() {\n        for i := 0; i < len(a); i++ {\n            tmp := a[i]\n            j := i - 1\n            for j >= 0 && a[j] > tmp {\n                a[j+1] = a[j]\n                j--\n            }\n            a[j+1] = tmp\n        }\n    }\n```\n\n> 快速排序\n\n![Quick Sort](http://upload.wikimedia.org/wikipedia/commons/9/9c/Quicksort-example.gif)\n\n```golang\n    func (a Array) QuickSort(left, right int) {\n        if left < right {\n            key := a[left]\n            low := left\n            high := right\n            for low < high {\n                for low < high && a[high] > key {\n                    high--\n                }\n                a[low] = a[high]\n                for low < high && a[low] < key {\n                    low++\n                }\n                a[high] = a[low]\n            }\n            a[low] = key\n            a.QuickSort(left, low-1)\n            a.QuickSort(low+1, right)\n        }\n    }\n```\n\n> 完整代码\n\n```golang\n    package main\n\n    type Array []int32\n\n    func (a Array) BubbleSort() {\n        for i := 0; i < len(a); i++ {\n            for j := 0; j < len(a)-i-1; j++ {\n                if a[j] > a[j+1] {\n                    a[j], a[j+1] = a[j+1], a[j]\n                }\n            }\n        }\n    }\n    func (a Array) InsertSort() {\n        for i := 0; i < len(a); i++ {\n            tmp := a[i]\n            j := i - 1\n            for j >= 0 && a[j] > tmp {\n                a[j+1] = a[j]\n                j--\n            }\n            a[j+1] = tmp\n        }\n\n    }\n    func (a Array) QuickSort(left, right int) {\n        if left < right {\n            key := a[left]\n            low := left\n            high := right\n            for low < high {\n                for low < high && a[high] > key {\n                    high--\n                }\n                a[low] = a[high]\n                for low < high && a[low] < key {\n                    low++\n                }\n                a[high] = a[low]\n            }\n            a[low] = key\n            a.QuickSort(left, low-1)\n            a.QuickSort(low+1, right)\n        }\n    }\n    func main() {\n        var a Array = []int32{1, 5, 2, 6, 3, 9, 7, 4}\n\n        //a.Bubble()\n        //a.Insert()\n        a.QuickSort(0, len(a)-1)\n        for _, i := range a {\n            print(i)\n        }\n\n    }\n```","slug":"golang-sort","updated":1420697687000,"excerpt":"","_id":"qq3ngpx5oqh71kwc","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"HashSet的实现","date":1412684665000,"tags":["6pr151anzuxq5krl"],"content":"<p>Set是由若干个无序且不重复的对象所组成。它既包含Array的运算功能,同时又兼有Hash的高速搜索功能。HashSet是基于HashMap实现的.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySet</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Set</span>&lt;<span class=\"title\">E</span>&gt;</span>{</div><div class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;E, Object&gt; map;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object notUse=<span class=\"keyword\">new</span> Object();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title\">MySet</span>() {</div><div class=\"line\">        map = <span class=\"keyword\">new</span> HashMap&lt;E,Object&gt;();</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span>() {</div><div class=\"line\">        <span class=\"keyword\">return</span> map.keySet().iterator();</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span>(E e) {</div><div class=\"line\">        <span class=\"keyword\">return</span> map.put(e, notUse) == <span class=\"keyword\">null</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span>(Collection&lt;? extends E&gt; c) {</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span>() {</div><div class=\"line\">        map.clear();</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span>(Object o) {</div><div class=\"line\">        <span class=\"keyword\">return</span> map.containsKey(o);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsAll</span>(Collection&lt;?&gt; c) {</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span>() {</div><div class=\"line\">        <span class=\"keyword\">return</span> map.isEmpty();</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span>(Object o) {</div><div class=\"line\">        <span class=\"keyword\">return</span> map.remove(o) == notUse;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span>(Collection&lt;?&gt; c) {</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span>(Collection&lt;?&gt; c) {</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span>() {</div><div class=\"line\">        <span class=\"keyword\">return</span> map.size();</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Object[] <span class=\"title\">toArray</span>() {</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"annotation\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T[] <span class=\"title\">toArray</span>(T[] a) {</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/java-set.md","raw":"title: HashSet的实现\ndate: 2014-10-07 20:24:25\ntags: java\n---\nSet是由若干个无序且不重复的对象所组成。它既包含Array的运算功能,同时又兼有Hash的高速搜索功能。HashSet是基于HashMap实现的.\n```java\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class MySet<E> implements Set<E>{\n    private HashMap<E, Object> map;\n    private static final Object notUse=new Object();\n    \n    public MySet() {\n        map = new HashMap<E,Object>();\n    }\n    @Override\n    public Iterator<E> iterator() {\n        return map.keySet().iterator();\n    }\n\n    @Override\n    public boolean add(E e) {\n        return map.put(e, notUse) == null;\n    }\n\n    @Override\n    public boolean addAll(Collection<? extends E> c) {\n        return false;\n    }\n\n    @Override\n    public void clear() {\n        map.clear();\n    }\n\n    @Override\n    public boolean contains(Object o) {\n        return map.containsKey(o);\n    }\n\n    @Override\n    public boolean containsAll(Collection<?> c) {\n        return false;\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return map.isEmpty();\n    }\n\n    @Override\n    public boolean remove(Object o) {\n        return map.remove(o) == notUse;\n    }\n\n    @Override\n    public boolean removeAll(Collection<?> c) {\n        return false;\n    }\n\n    @Override\n    public boolean retainAll(Collection<?> c) {\n        return false;\n    }\n\n    @Override\n    public int size() {\n        return map.size();\n    }\n\n    @Override\n    public Object[] toArray() {\n        \n        return null;\n    }\n\n    @Override\n    public <T> T[] toArray(T[] a) {\n        return null;\n    }\n}\n```","slug":"java-set","updated":1420697687000,"excerpt":"","_id":"7n1xfqmd3mjpnl2h","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Hash表的实现","date":1413006205000,"tags":["6pr151anzuxq5krl"],"content":"<p>Hash表是一种特殊的数据结构。在Hash表中，记录在表中的位置和其关键字之间存在着一种确定的关系，这样我们就可以预先知道关键字在表中的位置，从而直接通过下标找到记录。使时间复杂度直接降为O（1）.Hash表采用一个映射函数f(key) —&gt; adress将关键字映射到该记录在表中的存储位置.</p>\n<h3 id=\"Hash函数的设计\">Hash函数的设计</h3>\n<ul>\n<li>直接定址法<br>  取关键字或者关键字的某个线性函数为Hash地址，即address(key)=a*key+b;如知道学生的学号从2000开始，最大为4000，则可以将address(key)=key-2000作为Hash地址。</li>\n<li>平方取中法<br>  对关键字进行平方运算，然后取结果的中间几位作为Hash地址。假如有以下关键字序列{421，423，436}，平方之后的结果为{177241，178929，190096}，那么可以取{72，89，00}作为Hash地址。</li>\n<li>折叠法<br>  将关键字拆分成几部分，然后将这几部分组合在一起，以特定的方式进行转化形成Hash地址。假如知道图书的ISBN号为8903-241-23，可以将address(key)=89+03+24+12+3作为Hash地址。</li>\n<li>除留取余法<br>  如果知道Hash表的最大长度为m，可以取不大于m的最大质数p，然后对关键字进行取余运算，address(key)=key%p。在这里p的选取非常关键，p选择的好的话，能够最大程度地减少冲突，p一般取不大于m的最大质数。</li>\n</ul>\n<h3 id=\"Hash处理冲突方法\">Hash处理冲突方法</h3>\n<ul>\n<li>开放定址法<br>  为产生冲突的关键字地址 H(key) 求得一个地址序列： H0, H1, H2, …, Hs  1≤s≤m-1，Hi = (H(key) +di ) MOD m，其中： i=1, 2, …, s，H(key)为哈希函数;m为哈希表长;</li>\n<li>再哈希法<br>  构造若干个哈希函数，当发生冲突时，根据另一个哈希函数计算下一个哈希地址，直到冲突不再发生。即：Hi=Rhi(key)    i=1,2,……k，其中：Rhi——不同的哈希函数，特点：计算时间增加</li>\n<li>链地址法<br>  采用数组和链表相结合的办法，将Hash地址相同的记录存储在一张线性表中，而每张表的表头的序号即为计算得到的Hash地址。如上述例子中，采用链地址法形成的Hash表存储表示为：<br>  <img src=\"http://pic002.cnblogs.com/images/2012/288799/2012092709470640.jpg\" alt=\"链地址法\"></li>\n</ul>\n<h3 id=\"代码实现\">代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.sllt.qiao;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>{</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;<span class=\"comment\">// 当前容量</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> INIT_CAPACITY = <span class=\"number\">16</span>;<span class=\"comment\">// 默认容量</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Entry&lt;K, V&gt;[] container;<span class=\"comment\">// 实际存储数据的数组对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> LOAD_FACTOR = <span class=\"number\">0.75</span>f;<span class=\"comment\">// 装载因子</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> max;<span class=\"comment\">// 能存的最大的数=capacity*factor</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 自己设置容量和装载因子的构造器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title\">MyMap</span>(<span class=\"keyword\">int</span> init_Capaticy, <span class=\"keyword\">float</span> load_factor) {</div><div class=\"line\">        <span class=\"keyword\">if</span> (init_Capaticy &lt; <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span></div><div class=\"line\">                    + init_Capaticy);</div><div class=\"line\">        <span class=\"keyword\">if</span> (load_factor &lt;= <span class=\"number\">0</span> || Float.isNaN(load_factor))</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span></div><div class=\"line\">                    + load_factor);</div><div class=\"line\">        <span class=\"keyword\">this</span>.LOAD_FACTOR = load_factor;</div><div class=\"line\">        max = (<span class=\"keyword\">int</span>) (init_Capaticy * load_factor);</div><div class=\"line\">        container = <span class=\"keyword\">new</span> Entry[init_Capaticy];</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用默认参数的构造器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title\">MyMap</span>() {</div><div class=\"line\">        <span class=\"keyword\">this</span>(INIT_CAPACITY, LOAD_FACTOR);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"javadoc\">/**</span></div><div class=\"line\">     * 存</div><div class=\"line\">     * </div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> k</div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> v</div><div class=\"line\">     *<span class=\"javadoctag\"> @return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">put</span>(K k, V v) {</div><div class=\"line\">        <span class=\"comment\">// 1.计算K的hash值</span></div><div class=\"line\">        <span class=\"comment\">// 因为自己很难写出对不同的类型都适用的Hash算法，故调用JDK给出的hashCode()方法来计算hash值</span></div><div class=\"line\">        <span class=\"keyword\">int</span> hash = k.hashCode();</div><div class=\"line\">        <span class=\"comment\">//将所有信息封装为一个Entry</span></div><div class=\"line\">        Entry&lt;K,V&gt; temp=<span class=\"keyword\">new</span> Entry(k,v,hash);</div><div class=\"line\">            <span class=\"keyword\">if</span>(setEntry(temp, container)){</div><div class=\"line\">                <span class=\"comment\">// 大小加一</span></div><div class=\"line\">                size++;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            }</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"javadoc\">/**</span></div><div class=\"line\">     * 扩容的方法</div><div class=\"line\">     * </div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> newSize</div><div class=\"line\">     *            新的容器大小</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">reSize</span>(<span class=\"keyword\">int</span> newSize) {</div><div class=\"line\">        <span class=\"comment\">// 1.声明新数组</span></div><div class=\"line\">        Entry&lt;K, V&gt;[] newTable = <span class=\"keyword\">new</span> Entry[newSize];</div><div class=\"line\">        max = (<span class=\"keyword\">int</span>) (newSize * LOAD_FACTOR);</div><div class=\"line\">        <span class=\"comment\">// 2.复制已有元素,即遍历所有元素，每个元素再存一遍</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; container.length; j++) {</div><div class=\"line\">            Entry&lt;K, V&gt; entry = container[j];</div><div class=\"line\">            <span class=\"comment\">//因为每个数组元素其实为链表，所以…………</span></div><div class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != entry) {</div><div class=\"line\">                setEntry(entry, newTable);</div><div class=\"line\">                entry = entry.next;</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"comment\">// 3.改变指向</span></div><div class=\"line\">        container = newTable;</div><div class=\"line\">        </div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"javadoc\">/**</span></div><div class=\"line\">     *将指定的结点temp添加到指定的hash表table当中</div><div class=\"line\">     * 添加时判断该结点是否已经存在</div><div class=\"line\">     * 如果已经存在，返回false</div><div class=\"line\">     * 添加成功返回true</div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> temp</div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> table</div><div class=\"line\">     *<span class=\"javadoctag\"> @return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setEntry</span>(Entry&lt;K,V&gt; temp,Entry[] table){</div><div class=\"line\">        <span class=\"comment\">// 根据hash值找到下标</span></div><div class=\"line\">        <span class=\"keyword\">int</span> index = indexFor(temp.hash, table.length);</div><div class=\"line\">        <span class=\"comment\">//根据下标找到对应元素</span></div><div class=\"line\">        Entry&lt;K, V&gt; entry = table[index];</div><div class=\"line\">        <span class=\"comment\">// 3.若存在</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != entry) {</div><div class=\"line\">            <span class=\"comment\">// 3.1遍历整个链表，判断是否相等</span></div><div class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != entry) {</div><div class=\"line\">                <span class=\"comment\">//判断相等的条件时应该注意，除了比较地址相同外，引用传递的相等用equals()方法比较</span></div><div class=\"line\">                <span class=\"comment\">//相等则不存，返回false</span></div><div class=\"line\">                <span class=\"keyword\">if</span> ((temp.key == entry.key||temp.key.equals(entry.key)) && temp.hash == entry.hash&&(temp.value==entry.value||temp.value.equals(entry.value))) {</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                }</div><div class=\"line\">                <span class=\"comment\">//不相等则比较下一个元素</span></div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp.key != entry.key && temp.value != entry.value) {</div><div class=\"line\">                        <span class=\"comment\">//到达队尾，中断循环</span></div><div class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span>==entry.next){</div><div class=\"line\">                            <span class=\"keyword\">break</span>;</div><div class=\"line\">                        }</div><div class=\"line\">                        <span class=\"comment\">// 没有到达队尾，继续遍历下一个元素</span></div><div class=\"line\">                        entry = entry.next;</div><div class=\"line\">                }</div><div class=\"line\">            }</div><div class=\"line\">            <span class=\"comment\">// 3.2当遍历到了队尾，如果都没有相同的元素，则将该元素挂在队尾</span></div><div class=\"line\">            addEntry2Last(entry,temp);</div><div class=\"line\">                </div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"comment\">// 4.若不存在,直接设置初始化元素</span></div><div class=\"line\">        setFirstEntry(temp,index,table);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addEntry2Last</span>(Entry&lt;K, V&gt; entry, Entry&lt;K, V&gt; temp) {</div><div class=\"line\">        <span class=\"keyword\">if</span> (size &gt; max) {</div><div class=\"line\">            reSize(container.length * <span class=\"number\">4</span>);</div><div class=\"line\">        }</div><div class=\"line\">        entry.next=temp;</div><div class=\"line\">        </div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"javadoc\">/**</span></div><div class=\"line\">     * 将指定结点temp，添加到指定的hash表table的指定下标index中</div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> temp</div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> index</div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> table</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstEntry</span>(Entry&lt;K, V&gt; temp, <span class=\"keyword\">int</span> index, Entry[] table) {</div><div class=\"line\">        <span class=\"comment\">// 1.判断当前容量是否超标，如果超标，调用扩容方法</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (size &gt; max) {</div><div class=\"line\">            reSize(table.length * <span class=\"number\">4</span>);</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"comment\">// 2.不超标，或者扩容以后，设置元素</span></div><div class=\"line\">        table[index] = temp;</div><div class=\"line\">        <span class=\"comment\">//！！！！！！！！！！！！！！！</span></div><div class=\"line\">        <span class=\"comment\">//因为每次设置后都是新的链表，需要将其后接的结点都去掉</span></div><div class=\"line\">         <span class=\"comment\">//NND，少这一行代码卡了哥哥7个小时（代码重构）</span></div><div class=\"line\">        temp.next=<span class=\"keyword\">null</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"javadoc\">/**</span></div><div class=\"line\">     * 取</div><div class=\"line\">     * </div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> k</div><div class=\"line\">     *<span class=\"javadoctag\"> @return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> V <span class=\"title\">get</span>(K k) {</div><div class=\"line\">        Entry&lt;K, V&gt; entry = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"comment\">// 1.计算K的hash值</span></div><div class=\"line\">        <span class=\"keyword\">int</span> hash = k.hashCode();</div><div class=\"line\">        <span class=\"comment\">// 2.根据hash值找到下标</span></div><div class=\"line\">        <span class=\"keyword\">int</span> index = indexFor(hash, container.length);</div><div class=\"line\">        <span class=\"comment\">// 3。根据index找到链表</span></div><div class=\"line\">        entry = container[index];</div><div class=\"line\">        <span class=\"comment\">// 3。若链表为空，返回null</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == entry) {</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"comment\">// 4。若不为空，遍历链表，比较k是否相等,如果k相等，则返回该value</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != entry) {</div><div class=\"line\">            <span class=\"keyword\">if</span> (k == entry.key||entry.key.equals(k)) {</div><div class=\"line\">                <span class=\"keyword\">return</span> entry.value;</div><div class=\"line\">            }</div><div class=\"line\">            entry = entry.next;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"comment\">// 如果遍历完了不相等，则返回空</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"javadoc\">/**</span></div><div class=\"line\">     * 根据hash码，容器数组的长度,计算该哈希码在容器数组中的下标值</div><div class=\"line\">     * </div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> hashcode</div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> containerLength</div><div class=\"line\">     *<span class=\"javadoctag\"> @return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span>(<span class=\"keyword\">int</span> hashcode, <span class=\"keyword\">int</span> containerLength) {</div><div class=\"line\">        <span class=\"keyword\">return</span> hashcode & (containerLength - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"javadoc\">/**</span></div><div class=\"line\">     * 用来实际保存数据的内部类,因为采用挂链法解决冲突，此内部类设计为链表形式</div><div class=\"line\">     * </div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> &lt;K&gt;key</div><div class=\"line\">     *<span class=\"javadoctag\"> @param</span> &lt;V&gt;</div><div class=\"line\">     *            value</div><div class=\"line\">     */</div><div class=\"line\">    class Entry&lt;K, V&gt; {</div><div class=\"line\">        Entry&lt;K, V&gt; next;<span class=\"comment\">// 下一个结点</span></div><div class=\"line\">        K key;<span class=\"comment\">// key</span></div><div class=\"line\">        V value;<span class=\"comment\">// value</span></div><div class=\"line\">        <span class=\"keyword\">int</span> hash;<span class=\"comment\">// 这个key对应的hash码，作为一个成员变量，当下次需要用的时候可以不用重新计算</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 构造方法</span></div><div class=\"line\">        Entry(K k, V v, <span class=\"keyword\">int</span> hash) {</div><div class=\"line\">            <span class=\"keyword\">this</span>.key = k;</div><div class=\"line\">            <span class=\"keyword\">this</span>.value = v;</div><div class=\"line\">            <span class=\"keyword\">this</span>.hash = hash;</div><div class=\"line\"></div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//相应的getter()方法</span></div><div class=\"line\"></div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/java-hash.md","raw":"title: Hash表的实现\ndate: 2014-10-11 13:43:25\ntags: java\n---\nHash表是一种特殊的数据结构。在Hash表中，记录在表中的位置和其关键字之间存在着一种确定的关系，这样我们就可以预先知道关键字在表中的位置，从而直接通过下标找到记录。使时间复杂度直接降为O（1）.Hash表采用一个映射函数f(key) --> adress将关键字映射到该记录在表中的存储位置.\n###Hash函数的设计\n* 直接定址法 \n    取关键字或者关键字的某个线性函数为Hash地址，即address(key)=a*key+b;如知道学生的学号从2000开始，最大为4000，则可以将address(key)=key-2000作为Hash地址。\n* 平方取中法\n    对关键字进行平方运算，然后取结果的中间几位作为Hash地址。假如有以下关键字序列{421，423，436}，平方之后的结果为{177241，178929，190096}，那么可以取{72，89，00}作为Hash地址。\n* 折叠法\n    将关键字拆分成几部分，然后将这几部分组合在一起，以特定的方式进行转化形成Hash地址。假如知道图书的ISBN号为8903-241-23，可以将address(key)=89+03+24+12+3作为Hash地址。\n* 除留取余法\n    如果知道Hash表的最大长度为m，可以取不大于m的最大质数p，然后对关键字进行取余运算，address(key)=key%p。在这里p的选取非常关键，p选择的好的话，能够最大程度地减少冲突，p一般取不大于m的最大质数。\n\n###Hash处理冲突方法\n* 开放定址法\n    为产生冲突的关键字地址 H(key) 求得一个地址序列： H0, H1, H2, …, Hs  1≤s≤m-1，Hi = (H(key) +di ) MOD m，其中： i=1, 2, …, s，H(key)为哈希函数;m为哈希表长;\n* 再哈希法\n    构造若干个哈希函数，当发生冲突时，根据另一个哈希函数计算下一个哈希地址，直到冲突不再发生。即：Hi=Rhi(key)    i=1,2,……k，其中：Rhi——不同的哈希函数，特点：计算时间增加\n* 链地址法\n    采用数组和链表相结合的办法，将Hash地址相同的记录存储在一张线性表中，而每张表的表头的序号即为计算得到的Hash地址。如上述例子中，采用链地址法形成的Hash表存储表示为：\n    ![链地址法](http://pic002.cnblogs.com/images/2012/288799/2012092709470640.jpg)\n\n### 代码实现\n```java\npackage com.sllt.qiao;\npublic class MyMap<K, V> {\n    private int size;// 当前容量\n    private static int INIT_CAPACITY = 16;// 默认容量\n    private Entry<K, V>[] container;// 实际存储数据的数组对象\n    private static float LOAD_FACTOR = 0.75f;// 装载因子\n    private int max;// 能存的最大的数=capacity*factor\n\n    // 自己设置容量和装载因子的构造器\n    public MyMap(int init_Capaticy, float load_factor) {\n        if (init_Capaticy < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \"\n                    + init_Capaticy);\n        if (load_factor <= 0 || Float.isNaN(load_factor))\n            throw new IllegalArgumentException(\"Illegal load factor: \"\n                    + load_factor);\n        this.LOAD_FACTOR = load_factor;\n        max = (int) (init_Capaticy * load_factor);\n        container = new Entry[init_Capaticy];\n    }\n\n    // 使用默认参数的构造器\n    public MyMap() {\n        this(INIT_CAPACITY, LOAD_FACTOR);\n    }\n\n    /**\n     * 存\n     * \n     * @param k\n     * @param v\n     * @return\n     */\n    public boolean put(K k, V v) {\n        // 1.计算K的hash值\n        // 因为自己很难写出对不同的类型都适用的Hash算法，故调用JDK给出的hashCode()方法来计算hash值\n        int hash = k.hashCode();\n        //将所有信息封装为一个Entry\n        Entry<K,V> temp=new Entry(k,v,hash);\n            if(setEntry(temp, container)){\n                // 大小加一\n                size++;\n                return true;\n            }\n            return false;\n    }\n\n\n    /**\n     * 扩容的方法\n     * \n     * @param newSize\n     *            新的容器大小\n     */\n    private void reSize(int newSize) {\n        // 1.声明新数组\n        Entry<K, V>[] newTable = new Entry[newSize];\n        max = (int) (newSize * LOAD_FACTOR);\n        // 2.复制已有元素,即遍历所有元素，每个元素再存一遍\n        for (int j = 0; j < container.length; j++) {\n            Entry<K, V> entry = container[j];\n            //因为每个数组元素其实为链表，所以…………\n            while (null != entry) {\n                setEntry(entry, newTable);\n                entry = entry.next;\n            }\n        }\n        // 3.改变指向\n        container = newTable;\n        \n    }\n    \n    /**\n     *将指定的结点temp添加到指定的hash表table当中\n     * 添加时判断该结点是否已经存在\n     * 如果已经存在，返回false\n     * 添加成功返回true\n     * @param temp\n     * @param table\n     * @return\n     */\n    private boolean setEntry(Entry<K,V> temp,Entry[] table){\n        // 根据hash值找到下标\n        int index = indexFor(temp.hash, table.length);\n        //根据下标找到对应元素\n        Entry<K, V> entry = table[index];\n        // 3.若存在\n        if (null != entry) {\n            // 3.1遍历整个链表，判断是否相等\n            while (null != entry) {\n                //判断相等的条件时应该注意，除了比较地址相同外，引用传递的相等用equals()方法比较\n                //相等则不存，返回false\n                if ((temp.key == entry.key||temp.key.equals(entry.key)) && temp.hash == entry.hash&&(temp.value==entry.value||temp.value.equals(entry.value))) {\n                    return false;\n                }\n                //不相等则比较下一个元素\n                else if (temp.key != entry.key && temp.value != entry.value) {\n                        //到达队尾，中断循环\n                        if(null==entry.next){\n                            break;\n                        }\n                        // 没有到达队尾，继续遍历下一个元素\n                        entry = entry.next;\n                }\n            }\n            // 3.2当遍历到了队尾，如果都没有相同的元素，则将该元素挂在队尾\n            addEntry2Last(entry,temp);\n                \n        }\n        // 4.若不存在,直接设置初始化元素\n        setFirstEntry(temp,index,table);\n        return true;\n    }\n    \n    private void addEntry2Last(Entry<K, V> entry, Entry<K, V> temp) {\n        if (size > max) {\n            reSize(container.length * 4);\n        }\n        entry.next=temp;\n        \n    }\n\n    /**\n     * 将指定结点temp，添加到指定的hash表table的指定下标index中\n     * @param temp\n     * @param index\n     * @param table\n     */\n    private void setFirstEntry(Entry<K, V> temp, int index, Entry[] table) {\n        // 1.判断当前容量是否超标，如果超标，调用扩容方法\n        if (size > max) {\n            reSize(table.length * 4);\n        }\n        // 2.不超标，或者扩容以后，设置元素\n        table[index] = temp;\n        //！！！！！！！！！！！！！！！\n        //因为每次设置后都是新的链表，需要将其后接的结点都去掉\n         //NND，少这一行代码卡了哥哥7个小时（代码重构）\n        temp.next=null;\n    }\n\n    /**\n     * 取\n     * \n     * @param k\n     * @return\n     */\n    public V get(K k) {\n        Entry<K, V> entry = null;\n        // 1.计算K的hash值\n        int hash = k.hashCode();\n        // 2.根据hash值找到下标\n        int index = indexFor(hash, container.length);\n        // 3。根据index找到链表\n        entry = container[index];\n        // 3。若链表为空，返回null\n        if (null == entry) {\n            return null;\n        }\n        // 4。若不为空，遍历链表，比较k是否相等,如果k相等，则返回该value\n        while (null != entry) {\n            if (k == entry.key||entry.key.equals(k)) {\n                return entry.value;\n            }\n            entry = entry.next;\n        }\n        // 如果遍历完了不相等，则返回空\n        return null;\n\n    }\n\n    /**\n     * 根据hash码，容器数组的长度,计算该哈希码在容器数组中的下标值\n     * \n     * @param hashcode\n     * @param containerLength\n     * @return\n     */\n    public int indexFor(int hashcode, int containerLength) {\n        return hashcode & (containerLength - 1);\n\n    }\n\n    /**\n     * 用来实际保存数据的内部类,因为采用挂链法解决冲突，此内部类设计为链表形式\n     * \n     * @param <K>key\n     * @param <V>\n     *            value\n     */\n    class Entry<K, V> {\n        Entry<K, V> next;// 下一个结点\n        K key;// key\n        V value;// value\n        int hash;// 这个key对应的hash码，作为一个成员变量，当下次需要用的时候可以不用重新计算\n\n        // 构造方法\n        Entry(K k, V v, int hash) {\n            this.key = k;\n            this.value = v;\n            this.hash = hash;\n\n        }\n\n        //相应的getter()方法\n\n    }\n}\n```","slug":"java-hash","updated":1420697687000,"excerpt":"","_id":"c5iup40fzcogkoov","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"在Rails中实现markdown解析","date":1415867974000,"tags":["6ygws527jivgi07s"],"content":"<p>首先，安装gem</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">gem</span> <span class=\"string\">'redcarpet'</span></div></pre></td></tr></table></figure>\n\n<p>然后在app/helpers/application_helper.rb添加如下代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">def markdown(<span class=\"keyword\">text</span>)</div><div class=\"line\">    render_options = {</div><div class=\"line\">        filter_html:     <span class=\"constant\">false</span>,</div><div class=\"line\">        hard_wrap:       <span class=\"constant\">true</span>, </div><div class=\"line\">        link_attributes: { <span class=\"built_in\">rel</span>: <span class=\"string\">'nofollow'</span> }</div><div class=\"line\">    }</div><div class=\"line\">    renderer = Redcarpet::Render::HTML.<span class=\"built_in\">new</span>(render_options)</div><div class=\"line\">    extensions = {</div><div class=\"line\">            <span class=\"comment\">#will parse links without need of enclosing them</span></div><div class=\"line\">            autolink:           <span class=\"constant\">true</span>,</div><div class=\"line\">            fenced_code_blocks: <span class=\"constant\">true</span>,</div><div class=\"line\">            <span class=\"comment\"># will ignore standard require for empty lines surrounding HTML blocks</span></div><div class=\"line\">            lax_spacing:        <span class=\"constant\">true</span>,</div><div class=\"line\">            <span class=\"comment\"># will not generate emphasis inside of words, for example no_emph_no</span></div><div class=\"line\">            no_intra_emphasis:  <span class=\"constant\">true</span>,</div><div class=\"line\">            <span class=\"comment\"># will parse strikethrough from ~~, for example: ~~bad~~</span></div><div class=\"line\">            strikethrough:      <span class=\"constant\">true</span>,</div><div class=\"line\">            <span class=\"comment\"># will parse superscript after ^, you can wrap superscript in () </span></div><div class=\"line\">            superscript:        <span class=\"constant\">true</span></div><div class=\"line\">            <span class=\"comment\"># will require a space after # in defining headers</span></div><div class=\"line\">            <span class=\"comment\"># space_after_headers: true</span></div><div class=\"line\">        }</div><div class=\"line\">    Redcarpet::Markdown.<span class=\"built_in\">new</span>(renderer, extensions).render(<span class=\"keyword\">text</span>).html_safe</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">end</span></span></div></pre></td></tr></table></figure>\n\n<p>在view中:<br><code>&lt;%= markdown @content %&gt;</code></p>\n<p>在controller中：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationController</span> <span class=\"inheritance\">&lt; <span class=\"parent\">ActionController::Base</span></span></span></div><div class=\"line\">    <span class=\"keyword\">include</span> <span class=\"constant\">ApplicationHelper</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/use-markdown-in-rails.md","raw":"title: 在Rails中实现markdown解析\ndate: 2014-11-13 16:39:34\ntags: rails\n---\n\n首先，安装gem\n```\ngem 'redcarpet'\n```\n然后在app/helpers/application_helper.rb添加如下代码：\n```\ndef markdown(text)\n    render_options = {\n        filter_html:     false,\n        hard_wrap:       true, \n        link_attributes: { rel: 'nofollow' }\n    }\n    renderer = Redcarpet::Render::HTML.new(render_options)\n    extensions = {\n            #will parse links without need of enclosing them\n            autolink:           true,\n            fenced_code_blocks: true,\n            # will ignore standard require for empty lines surrounding HTML blocks\n            lax_spacing:        true,\n            # will not generate emphasis inside of words, for example no_emph_no\n            no_intra_emphasis:  true,\n            # will parse strikethrough from ~~, for example: ~~bad~~\n            strikethrough:      true,\n            # will parse superscript after ^, you can wrap superscript in () \n            superscript:        true\n            # will require a space after # in defining headers\n            # space_after_headers: true\n        }\n    Redcarpet::Markdown.new(renderer, extensions).render(text).html_safe\nend\n```\n在view中:\n` <%= markdown @content %> `\n\n在controller中：\n```\nclass ApplicationController < ActionController::Base\n    include ApplicationHelper\nend\n```","slug":"use-markdown-in-rails","updated":1420697687000,"excerpt":"","_id":"amn493eqn26xhtuh","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"ruby元编程-对象模型","date":1417495605000,"tags":["5swj9886iy672x08"],"content":"<h1 id=\"ruby中的对象\">ruby中的对象</h1>\n<p>在ruby中任何东西都是对象，甚至是nil、类等都是对象。<br>比如下面的例子：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;</span> <span class=\"number\">1</span>.methods</span></div><div class=\"line\"><span class=\"output\"><span class=\"status\">=&gt;</span> [<span class=\"symbol\">:to_s</span>, <span class=\"symbol\">:inspect</span>, <span class=\"symbol\">:-@</span>, <span class=\"symbol\">:+</span>, <span class=\"symbol\">:-</span>, <span class=\"symbol\">:*</span>, <span class=\"symbol\">:/</span>, <span class=\"symbol\">:div</span>, <span class=\"symbol\">:%</span>, <span class=\"symbol\">:modulo</span>, <span class=\"symbol\">:divmod</span>, <span class=\"symbol\">:fdiv</span>, <span class=\"symbol\">:**</span>, <span class=\"symbol\">:abs</span>, <span class=\"symbol\">:magnitude</span>, <span class=\"symbol\">:==</span>, <span class=\"symbol\">:===</span>, <span class=\"symbol\">:&lt;=&gt;</span>, <span class=\"symbol\">:&gt;</span>, <span class=\"symbol\">:&gt;=</span>, <span class=\"symbol\">:&lt;</span>, <span class=\"symbol\">:&lt;=</span>, <span class=\"symbol\">:~</span>, <span class=\"symbol\">:&</span>, <span class=\"symbol\">:|</span>, <span class=\"symbol\">:^</span>, <span class=\"symbol\">:[]</span>, <span class=\"symbol\">:&lt;&lt;</span>, <span class=\"symbol\">:&gt;&gt;</span>, <span class=\"symbol\">:to_f</span>, <span class=\"symbol\">:size</span>, <span class=\"symbol\">:bit_length</span>, <span class=\"symbol\">:zero?</span>, <span class=\"symbol\">:odd?</span>, <span class=\"symbol\">:even?</span>, <span class=\"symbol\">:succ</span>, <span class=\"symbol\">:integer?</span>, <span class=\"symbol\">:upto</span>, <span class=\"symbol\">:downto</span>, <span class=\"symbol\">:times</span>, <span class=\"symbol\">:next</span>, <span class=\"symbol\">:pred</span>, <span class=\"symbol\">:chr</span>, <span class=\"symbol\">:ord</span>, <span class=\"symbol\">:to_i</span>, <span class=\"symbol\">:to_int</span>, <span class=\"symbol\">:floor</span>, <span class=\"symbol\">:ceil</span>, <span class=\"symbol\">:truncate</span>, <span class=\"symbol\">:round</span>, <span class=\"symbol\">:gcd</span>, <span class=\"symbol\">:lcm</span>, <span class=\"symbol\">:gcdlcm</span>, <span class=\"symbol\">:numerator</span>, <span class=\"symbol\">:denominator</span>, <span class=\"symbol\">:to_r</span>, <span class=\"symbol\">:rationalize</span>, <span class=\"symbol\">:singleton_method_added</span>, <span class=\"symbol\">:coerce</span>, <span class=\"symbol\">:i</span>, <span class=\"symbol\">:+@</span>, <span class=\"symbol\">:eql?</span>, ......]</span></div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;</span> <span class=\"number\">1</span>.class</span></div><div class=\"line\"><span class=\"output\"><span class=\"status\">=&gt;</span> <span class=\"constant\">Fixnum</span></span></div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;</span> <span class=\"constant\">Fixnum</span>.class</span></div><div class=\"line\"><span class=\"output\"><span class=\"status\">=&gt;</span> <span class=\"constant\">Class</span></span></div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;</span> <span class=\"constant\">Class</span>.class</span></div><div class=\"line\"><span class=\"output\"><span class=\"status\">=&gt;</span> <span class=\"constant\">Class</span></span></div></pre></td></tr></table></figure>\n\n<p>在ruby中对象是由一组实例变量和一个类的引用组成的，对象的方法存在于对象所在的类中。</p>\n<h1 id=\"猴子补丁\">猴子补丁</h1>\n<p>所谓猴子补丁就是不改变源代码而对功能进行追加和变更。</p>\n<h3 id=\"开放类\">开放类</h3>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">class Foo</span></span></div><div class=\"line\">    def hello</div><div class=\"line\">        \"hello world !\"</div><div class=\"line\">    end</div><div class=\"line\">end</div><div class=\"line\">class Foo</div><div class=\"line\">    def plus(arg1,arg2)</div><div class=\"line\">        arg1 + arg2</div><div class=\"line\">    end</div><div class=\"line\">end</div><div class=\"line\">&gt;&gt; foo = <span class=\"constant\">Foo</span>.new</div><div class=\"line\"><span class=\"output\"><span class=\"status\">=&gt;</span> <span class=\"value\">#&lt;Foo:0xb8c2b574&gt;</span></span></div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;</span> foo.hello</span></div><div class=\"line\"><span class=\"output\"><span class=\"status\">=&gt;</span> <span class=\"string\">\"hello world !\"</span></span></div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;</span> foo.plus(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span></div><div class=\"line\"><span class=\"output\"><span class=\"status\">=&gt;</span> <span class=\"number\">7</span></span></div></pre></td></tr></table></figure>\n\n<p>第二个class Foo中并不是新建了一个Foo类，而是重新打开了Foo类，给其新增了一个叫plus的方法。在ruby中所有的类都是开放类，你可以自由的开发String、Fixnum等基本的数据类型给它增加功能.</p>\n<h1 id=\"ruby中的类\">ruby中的类</h1>\n<p>上文说类也是一个对象，那么什么是类呢？所谓类就是一个Class类的实例加一组实例方法和一个对其父类的引用。既然这样，就可以这样定义一个类，虽然结果也会产生一个类：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello = <span class=\"keyword\">Class</span>.<span class=\"keyword\">new</span></div></pre></td></tr></table></figure>\n\n<p>一般情况下，类这么定义：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n\n<p>其区别在于Hello是个常量（在ruby中，任何以大写字母开头的引用即为常量）而已。那么，class 包裹起来的一块东西又是什么呢？其只不过是个作用域。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span></div><div class=\"line\">    puts <span class=\"string\">\"hello world\"</span></div><div class=\"line\">    <span class=\"number\">123</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> </span>say</div><div class=\"line\">        <span class=\"string\">\"hello sllt\"</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n\n<h1 id=\"self\">self</h1>\n<p>每一行代码都会在一个对象中执行，这个对象就是当前对象（self)。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></div><div class=\"line\">    <span class=\"keyword\">self</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"output\"><span class=\"status\"></span></span></div><div class=\"line\">=&gt; <span class=\"constant\">MyClass</span></div><div class=\"line\"><span class=\"input\"><span class=\"prompt\"></span></span></div><div class=\"line\">class MyClass</div><div class=\"line\">    def say</div><div class=\"line\">        \"hello\"</div><div class=\"line\">    end</div><div class=\"line\">    def put_self</div><div class=\"line\">        self</div><div class=\"line\">        say</div><div class=\"line\">    end</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">&gt;&gt; m = <span class=\"constant\">MyClass</span>.new</div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;</span> m.put_self</span></div><div class=\"line\"><span class=\"output\"><span class=\"status\">=&gt;</span> <span class=\"value\">#&lt;MyClass:0xb93de870&gt;</span> <span class=\"string\">\"hello\"</span></span></div></pre></td></tr></table></figure>\n\n<p>通过上面代码可以看出：</p>\n<ul>\n<li>当定义一个模块和类时，其自身扮演self的角色。</li>\n<li>当调用一个方法时，接收者会扮演self的角色。</li>\n</ul>\n","source":"_posts/metaprogramming-ruby-object.md","raw":"title: ruby元编程-对象模型\ndate: 2014-12-02 12:46:45\ntags: ruby\n---\nruby中的对象\n=================\n在ruby中任何东西都是对象，甚至是nil、类等都是对象。\n比如下面的例子：\n```ruby\n>> 1.methods\n=> [:to_s, :inspect, :-@, :+, :-, :*, :/, :div, :%, :modulo, :divmod, :fdiv, :**, :abs, :magnitude, :==, :===, :<=>, :>, :>=, :<, :<=, :~, :&, :|, :^, :[], :<<, :>>, :to_f, :size, :bit_length, :zero?, :odd?, :even?, :succ, :integer?, :upto, :downto, :times, :next, :pred, :chr, :ord, :to_i, :to_int, :floor, :ceil, :truncate, :round, :gcd, :lcm, :gcdlcm, :numerator, :denominator, :to_r, :rationalize, :singleton_method_added, :coerce, :i, :+@, :eql?, ......]\n>> 1.class\n=> Fixnum\n>> Fixnum.class\n=> Class\n>> Class.class\n=> Class\n```\n在ruby中对象是由一组实例变量和一个类的引用组成的，对象的方法存在于对象所在的类中。\n\n猴子补丁\n===================\n所谓猴子补丁就是不改变源代码而对功能进行追加和变更。\n### 开放类\n```ruby\nclass Foo\n    def hello\n        \"hello world !\"\n    end\nend\nclass Foo\n    def plus(arg1,arg2)\n        arg1 + arg2\n    end\nend\n>> foo = Foo.new\n=> #<Foo:0xb8c2b574>\n>> foo.hello\n=> \"hello world !\"\n>> foo.plus(3,4)\n=> 7\n```\n第二个class Foo中并不是新建了一个Foo类，而是重新打开了Foo类，给其新增了一个叫plus的方法。在ruby中所有的类都是开放类，你可以自由的开发String、Fixnum等基本的数据类型给它增加功能.\n\nruby中的类\n===================\n上文说类也是一个对象，那么什么是类呢？所谓类就是一个Class类的实例加一组实例方法和一个对其父类的引用。既然这样，就可以这样定义一个类，虽然结果也会产生一个类：\n```\nhello = Class.new\n```\n一般情况下，类这么定义：\n```\nclass Hello\nend\n```\n其区别在于Hello是个常量（在ruby中，任何以大写字母开头的引用即为常量）而已。那么，class 包裹起来的一块东西又是什么呢？其只不过是个作用域。\n```ruby\nclass Hello\n    puts \"hello world\"\n    123\n    def say\n        \"hello sllt\"\n    end\nend\n```\n\nself\n====================\n每一行代码都会在一个对象中执行，这个对象就是当前对象（self)。\n```ruby\nclass MyClass\n    self\nend\n\n=> MyClass\n\nclass MyClass\n    def say\n        \"hello\"\n    end\n    def put_self\n        self\n        say\n    end\nend\n\n>> m = MyClass.new\n>> m.put_self\n=> #<MyClass:0xb93de870> \"hello\"\n```\n通过上面代码可以看出：\n* 当定义一个模块和类时，其自身扮演self的角色。\n* 当调用一个方法时，接收者会扮演self的角色。\n","slug":"metaprogramming-ruby-object","updated":1420697687000,"excerpt":"","_id":"ec5exmwyl5s6wyom","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"废话","_id":"k5wbyqyu1pwslo2m","posts":["2ine11my1nfzre8y"]},{"name":"算法","_id":"wb00sxv9bfh67y1p","posts":["qq3ngpx5oqh71kwc"]},{"name":"java","_id":"6pr151anzuxq5krl","posts":["7n1xfqmd3mjpnl2h","c5iup40fzcogkoov"]},{"name":"rails","_id":"6ygws527jivgi07s","posts":["amn493eqn26xhtuh"]},{"name":"ruby","_id":"5swj9886iy672x08","posts":["ec5exmwyl5s6wyom"]}]}