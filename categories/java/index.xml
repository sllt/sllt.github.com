<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on sllt的博客</title>
    <link>https://blog.sllt.me/categories/java/</link>
    <description>Recent content in java on sllt的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 11 Oct 2014 13:43:25 +0800</lastBuildDate><atom:link href="https://blog.sllt.me/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hash表的实现</title>
      <link>https://blog.sllt.me/posts/java-hash/</link>
      <pubDate>Sat, 11 Oct 2014 13:43:25 +0800</pubDate>
      
      <guid>https://blog.sllt.me/posts/java-hash/</guid>
      <description>Hash表是一种特殊的数据结构。在Hash表中，记录在表中的位置和其关键字之间存在着一种确定的关系，这样我们就可以预先知道关键字在表中的位置，从而直接通过下标找到记录。使时间复杂度直接降为O（1）.Hash表采用一个映射函数f(key) &amp;ndash;&amp;gt; adress将关键字映射到该记录在表中的存储位置.
###Hash函数的设计
 直接定址法 取关键字或者关键字的某个线性函数为Hash地址，即address(key)=a*key+b;如知道学生的学号从2000开始，最大为4000，则可以将address(key)=key-2000作为Hash地址。 平方取中法 对关键字进行平方运算，然后取结果的中间几位作为Hash地址。假如有以下关键字序列{421，423，436}，平方之后的结果为{177241，178929，190096}，那么可以取{72，89，00}作为Hash地址。 折叠法 将关键字拆分成几部分，然后将这几部分组合在一起，以特定的方式进行转化形成Hash地址。假如知道图书的ISBN号为8903-241-23，可以将address(key)=89+03+24+12+3作为Hash地址。 除留取余法 如果知道Hash表的最大长度为m，可以取不大于m的最大质数p，然后对关键字进行取余运算，address(key)=key%p。在这里p的选取非常关键，p选择的好的话，能够最大程度地减少冲突，p一般取不大于m的最大质数。  ###Hash处理冲突方法
 开放定址法 为产生冲突的关键字地址 H(key) 求得一个地址序列： H0, H1, H2, …, Hs 1≤s≤m-1，Hi = (H(key) +di ) MOD m，其中： i=1, 2, …, s，H(key)为哈希函数;m为哈希表长; 再哈希法 构造若干个哈希函数，当发生冲突时，根据另一个哈希函数计算下一个哈希地址，直到冲突不再发生。即：Hi=Rhi(key) i=1,2,……k，其中：Rhi——不同的哈希函数，特点：计算时间增加 链地址法 采用数组和链表相结合的办法，将Hash地址相同的记录存储在一张线性表中，而每张表的表头的序号即为计算得到的Hash地址。如上述例子中，采用链地址法形成的Hash表存储表示为：   代码实现 package com.sllt.qiao; public class MyMap&amp;lt;K, V&amp;gt; { private int size;// 当前容量  private static int INIT_CAPACITY = 16;// 默认容量  private Entry&amp;lt;K, V&amp;gt;[] container;// 实际存储数据的数组对象  private static float LOAD_FACTOR = 0.</description>
    </item>
    
    <item>
      <title>HashSet的实现</title>
      <link>https://blog.sllt.me/posts/java-set/</link>
      <pubDate>Tue, 07 Oct 2014 20:24:25 +0800</pubDate>
      
      <guid>https://blog.sllt.me/posts/java-set/</guid>
      <description>Set是由若干个无序且不重复的对象所组成。它既包含Array的运算功能,同时又兼有Hash的高速搜索功能。HashSet是基于HashMap实现的.
import java.util.Collection; import java.util.HashMap; import java.util.Iterator; import java.util.Set; public class MySet&amp;lt;E&amp;gt; implements Set&amp;lt;E&amp;gt;{ private HashMap&amp;lt;E, Object&amp;gt; map; private static final Object notUse=new Object(); public MySet() { map = new HashMap&amp;lt;E,Object&amp;gt;(); } @Override public Iterator&amp;lt;E&amp;gt; iterator() { return map.keySet().iterator(); } @Override public boolean add(E e) { return map.put(e, notUse) == null; } @Override public boolean addAll(Collection&amp;lt;? extends E&amp;gt; c) { return false; } @Override public void clear() { map.clear(); } @Override public boolean contains(Object o) { return map.</description>
    </item>
    
  </channel>
</rss>
