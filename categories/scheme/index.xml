<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scheme on sllt的博客</title>
    <link>https://blog.sllt.me/categories/scheme/</link>
    <description>Recent content in scheme on sllt的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 17 Nov 2015 14:02:14 +0800</lastBuildDate><atom:link href="https://blog.sllt.me/categories/scheme/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何写一个Scheme解释器</title>
      <link>https://blog.sllt.me/posts/write-a-scheme-interpreter/</link>
      <pubDate>Tue, 17 Nov 2015 14:02:14 +0800</pubDate>
      
      <guid>https://blog.sllt.me/posts/write-a-scheme-interpreter/</guid>
      <description>本文假设你会使用python。
我们会先实现一个scheme语法的简单计算器，以便了解实现一个解释器的简单步骤，接着会逐步给此计算器增加功能，使其成为一个完整的scheme解释器。
Scheme-wikipedia这里有关于scheme的更详细的介绍。
1.1 Scheme语法式的计算器 此简化的计算器包含加（+）、减（-）、乘（*）、除（/）四个表达式。
加法和乘法表达式可以接收任意数量的参数：
&amp;gt; (+ 1 2 3 4 ) 10 &amp;gt; (+) 0 &amp;gt; (* 1 2 3 4) 24 &amp;gt; (*) 1 减法(-)有两种情况，当传入一个参数时，会求这个数的相反数；传入两个或两个以上的操作时，会 进行减法操作， 例如(- 10 1 2 3) 等同于10 - 1 - 2 - 3。除法(/)也有两种情况。
&amp;gt; (- 10 1 2 3) 4 &amp;gt; (- 3) -3 &amp;gt; (/ 15 12) 1.25 &amp;gt; (/ 30 5 2) 3 &amp;gt; (/ 10) 0.1 一个表达式执行的时候，先会对其子表达式求值，将所得结果再执行所返回的值。
&amp;gt; (- 100 ( * 7 ( + 8 (/ -12 -3)))) 16.</description>
    </item>
    
  </channel>
</rss>
